query getCheckpoint($id: CheckpointId) {
    checkpoint(id: $id) {
        ...RPC_Checkpoint_Fields
    }
}

fragment RPC_Checkpoint_Fields on Checkpoint {
    # checkpointCommitments
    digest
    epoch {
        epochId
    }

    rollingGasSummary {
        computationCost
        storageCost
        storageRebate
        nonRefundableStorageFee
    }
    networkTotalTransactions
    previousCheckpointDigest
    sequenceNumber
    timestamp
    validatorSignatures
    transactionBlocks {
        pageInfo {
            hasNextPage
            endCursor
        }
        nodes {
            digest
        }
    }
    endOfEpoch: transactionBlocks(last: 1, filter: { kind: SYSTEM_TX }) {
        nodes {
            kind {
                __typename
                ... on EndOfEpochTransaction {
                    transactions(last: 1) {
                        nodes {
                            __typename
                            ... on ChangeEpochTransaction {
                                epoch {
                                    validatorSet {
                                        activeValidators {
                                            pageInfo {
                                                hasNextPage
                                                endCursor
                                            }
                                            nodes {
                                                credentials {
                                                    protocolPubKey
                                                }
                                                votingPower
                                            }
                                        }
                                    }
                                    protocolConfigs {
                                        protocolVersion
                                    }
                                    epochId
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}